
Maneuver System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000940  000009d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000009d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e95  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dd  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000671  00000000  00000000  000032e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  24:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  2c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_11>
  30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  44:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  48:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  4c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  54:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  58:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  5c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  60:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  68:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  6c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  70:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  74:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  7c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  80:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  84:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  8c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  90:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  94:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  98:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  9c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  ac:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b4:	50 01       	movw	r10, r0
  b6:	3e 01       	movw	r6, r28
  b8:	40 01       	movw	r8, r0
  ba:	42 01       	movw	r8, r4
  bc:	44 01       	movw	r8, r8
  be:	46 01       	movw	r8, r12
  c0:	48 01       	movw	r8, r16
  c2:	4a 01       	movw	r8, r20
  c4:	4c 01       	movw	r8, r24

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	e0 e4       	ldi	r30, 0x40	; 64
  da:	f9 e0       	ldi	r31, 0x09	; 9
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 30       	cpi	r26, 0x02	; 2
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a2 e0       	ldi	r26, 0x02	; 2
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a9 30       	cpi	r26, 0x09	; 9
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
  f8:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  fc:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

00000100 <__bad_interrupt>:
 100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <_Z8adc_Initv>:
	DDRB |= (1<<DDB0)|(1<<DDB1);
}

void adc_Init(){
	//select Vcc and select ADC1 as input
	ADMUX = (1<<REFS0);
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 10a:	87 e8       	ldi	r24, 0x87	; 135
 10c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 110:	08 95       	ret

00000112 <_Z10timer_Initv>:
}

void timer_Init(){
	OCR1A = 0x3D08;
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	9d e3       	ldi	r25, 0x3D	; 61
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	TCCR1B |= (1 << WGM12);
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 60       	ori	r24, 0x08	; 8
 126:	80 83       	st	Z, r24
	// Mode 4, CTC on OCR1A

	TIMSK1 |= (1 << OCIE1A);
 128:	af e6       	ldi	r26, 0x6F	; 111
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	8c 91       	ld	r24, X
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	8c 93       	st	X, r24
	//Set interrupt on compare match

	TCCR1B |= (1 << CS12) | (1 << CS10);
 132:	80 81       	ld	r24, Z
 134:	85 60       	ori	r24, 0x05	; 5
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <_Z16inputOutput_Initv>:
	}
	//We done ;)
}

void inputOutput_Init(){
	DDRB |= (1 << DDRB5);  //Set portB 5 as output LED
 13a:	25 9a       	sbi	0x04, 5	; 4
	
	//Output pinD 2 and 3 for linear actuator and pinD 4 and 5 for stepper motor
	DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4)| (1 << DDD5);
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	8c 63       	ori	r24, 0x3C	; 60
 140:	8a b9       	out	0x0a, r24	; 10
	
	DDRB &= ~(1<<DDRB7);   //Set portB 7 as input (Button input)
 142:	27 98       	cbi	0x04, 7	; 4
	
	//PinC 0, 1, 2 and 3 as input for voltage values from photoresistors
	DDRC &= ~((1<<DDRC0) | (1 << DDRC1) | (1 << DDRC2) | (1 << DDRC3));
 144:	87 b1       	in	r24, 0x07	; 7
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	87 b9       	out	0x07, r24	; 7
	
	//Set pins D 2 and 3 to power off the linear actuator by default
	PORTD |= (1 << PORTD3) | (1 << PORTD2);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8c 60       	ori	r24, 0x0C	; 12
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	08 95       	ret

00000152 <_Z8adc_readh>:

uint16_t adc_read(uint8_t channel){
	
	channel &= 0b00000111;
	
	ADMUX = (ADMUX & 0xF8) | channel;
 152:	ec e7       	ldi	r30, 0x7C	; 124
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	90 81       	ld	r25, Z
 158:	98 7f       	andi	r25, 0xF8	; 248
 15a:	87 70       	andi	r24, 0x07	; 7
 15c:	89 2b       	or	r24, r25
 15e:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));
 16a:	80 81       	ld	r24, Z
 16c:	86 fd       	sbrc	r24, 6
 16e:	fd cf       	rjmp	.-6      	; 0x16a <_Z8adc_readh+0x18>
	
	return ADC;
 170:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 174:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 178:	08 95       	ret

0000017a <_Z16moveStepperMotorv>:
	}
	
	PORTD |= (1 << PORTD3) | (1 << PORTD2);  //Cut the power of the linear actuator
}

void moveStepperMotor(){
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	int16_t v2;
	int16_t v3;
	int16_t difference;
	
	v2 = adc_read(R2);              //Read voltage value v2
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
 184:	ec 01       	movw	r28, r24
	
// 	convertToString(v2, value);     //Used to convert the value into
//  	uart_Transmit(value);			//a string and to display it
	
	v3 = adc_read(R3);				//Read voltage value v3
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
//  	convertToString(v3, value);
//  	uart_Transmit(value);
	
	difference = v2 - v3;           //Take difference
 18c:	9e 01       	movw	r18, r28
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
 192:	c9 01       	movw	r24, r18
	
//  	convertToString(difference, value);
//  	uart_Transmit(value);
	
	if(difference > 50) PORTD |= (1 << PORTD5);        //Rotate Clockwise
 194:	23 33       	cpi	r18, 0x33	; 51
 196:	31 05       	cpc	r19, r1
 198:	14 f0       	brlt	.+4      	; 0x19e <_Z16moveStepperMotorv+0x24>
 19a:	5d 9a       	sbi	0x0b, 5	; 11
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <_Z16moveStepperMotorv+0x2e>
	else if(difference < -50) PORTD &= ~(1 << PORTD5); //Rotate Counter-Clockwise
 19e:	8e 3c       	cpi	r24, 0xCE	; 206
 1a0:	3f ef       	ldi	r19, 0xFF	; 255
 1a2:	93 07       	cpc	r25, r19
 1a4:	0c f4       	brge	.+2      	; 0x1a8 <_Z16moveStepperMotorv+0x2e>
 1a6:	5d 98       	cbi	0x0b, 5	; 11
	
	while(difference < -50 || difference > 50){//True while the difference is outside the [-50, 50] range
 1a8:	c2 96       	adiw	r24, 0x32	; 50
 1aa:	85 36       	cpi	r24, 0x65	; 101
 1ac:	91 05       	cpc	r25, r1
 1ae:	d8 f0       	brcs	.+54     	; 0x1e6 <_Z16moveStepperMotorv+0x6c>
		v2 = adc_read(R2);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
 1b6:	ec 01       	movw	r28, r24
		v3 = adc_read(R3);			           //Continue reading voltage values and take difference
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
		difference = v2 - v3;
		
		//Generating square wave
		PORTD |= (1 << PORTD4);
 1be:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	ef e3       	ldi	r30, 0x3F	; 63
 1c2:	fc e9       	ldi	r31, 0x9C	; 156
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z16moveStepperMotorv+0x4a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z16moveStepperMotorv+0x50>
 1ca:	00 00       	nop
		_delay_ms(frequency);
		PORTD &= ~(1 << PORTD4);
 1cc:	5c 98       	cbi	0x0b, 4	; 11
 1ce:	ef e3       	ldi	r30, 0x3F	; 63
 1d0:	fc e9       	ldi	r31, 0x9C	; 156
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z16moveStepperMotorv+0x58>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_Z16moveStepperMotorv+0x5e>
 1d8:	00 00       	nop
//  	uart_Transmit(value);
	
	if(difference > 50) PORTD |= (1 << PORTD5);        //Rotate Clockwise
	else if(difference < -50) PORTD &= ~(1 << PORTD5); //Rotate Counter-Clockwise
	
	while(difference < -50 || difference > 50){//True while the difference is outside the [-50, 50] range
 1da:	c8 1b       	sub	r28, r24
 1dc:	d9 0b       	sbc	r29, r25
 1de:	e2 96       	adiw	r28, 0x32	; 50
 1e0:	c5 36       	cpi	r28, 0x65	; 101
 1e2:	d1 05       	cpc	r29, r1
 1e4:	28 f7       	brcc	.-54     	; 0x1b0 <_Z16moveStepperMotorv+0x36>
		PORTD |= (1 << PORTD4);
		_delay_ms(frequency);
		PORTD &= ~(1 << PORTD4);
		_delay_ms(frequency);
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <_Z13uart_TransmitPc>:
	while(ADCSRA & (1<<ADSC));
	
	return ADC;
}

void uart_Transmit(char data[]){
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	dc 01       	movw	r26, r24
 1f2:	9c 01       	movw	r18, r24
 1f4:	2a 5f       	subi	r18, 0xFA	; 250
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i = 0; i < 6; i++){
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
 1f8:	e0 ec       	ldi	r30, 0xC0	; 192
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
 1fc:	c6 ec       	ldi	r28, 0xC6	; 198
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
	return ADC;
}

void uart_Transmit(char data[]){
	for(int i = 0; i < 6; i++){
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
 200:	90 81       	ld	r25, Z
 202:	95 ff       	sbrs	r25, 5
 204:	fd cf       	rjmp	.-6      	; 0x200 <_Z13uart_TransmitPc+0x14>
		UDR0 = data[i];
 206:	8d 91       	ld	r24, X+
 208:	88 83       	st	Y, r24
	
	return ADC;
}

void uart_Transmit(char data[]){
	for(int i = 0; i < 6; i++){
 20a:	a2 17       	cp	r26, r18
 20c:	b3 07       	cpc	r27, r19
 20e:	c1 f7       	brne	.-16     	; 0x200 <_Z13uart_TransmitPc+0x14>
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
		UDR0 = data[i];
	}
	
	while(!(UCSR0A & (1<<UDRE0))); 
 210:	e0 ec       	ldi	r30, 0xC0	; 192
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	85 ff       	sbrs	r24, 5
 218:	fd cf       	rjmp	.-6      	; 0x214 <_Z13uart_TransmitPc+0x28>
	UDR0 = ' ';
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	for(int i = 0; i < 6; i++) value[i] = ' ';
 220:	e2 e0       	ldi	r30, 0x02	; 2
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	80 83       	st	Z, r24
 226:	81 83       	std	Z+1, r24	; 0x01
 228:	82 83       	std	Z+2, r24	; 0x02
 22a:	83 83       	std	Z+3, r24	; 0x03
 22c:	84 83       	std	Z+4, r24	; 0x04
 22e:	85 83       	std	Z+5, r24	; 0x05
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <_Z9uart_Initv>:

void uart_Init(){
	UBRR0H = (BAUDRATE>>8);				 //shift register to the right by 8 bits
 236:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BAUDRATE;					 //set baud rate
 23a:	87 e6       	ldi	r24, 0x67	; 103
 23c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);   //enable receiver and transmitter
 240:	e1 ec       	ldi	r30, 0xC1	; 193
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	88 61       	ori	r24, 0x18	; 24
 248:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); //8 bit data format
 24a:	e2 ec       	ldi	r30, 0xC2	; 194
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	86 60       	ori	r24, 0x06	; 6
 252:	80 83       	st	Z, r24
 254:	08 95       	ret

00000256 <main>:
char value[7];
int notManeuvering = 1;

int main(void)
{
	uart_Init();
 256:	0e 94 1b 01 	call	0x236	; 0x236 <_Z9uart_Initv>
	adc_Init();
 25a:	0e 94 82 00 	call	0x104	; 0x104 <_Z8adc_Initv>
	timer_Init();
 25e:	0e 94 89 00 	call	0x112	; 0x112 <_Z10timer_Initv>
	inputOutput_Init();	
 262:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z16inputOutput_Initv>

	sei();
 266:	78 94       	sei
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0x12>

0000026a <_Z7getChari>:
	word[6] = '\0';
}

char getChar(int digit){
	
	switch(digit)
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	89 30       	cpi	r24, 0x09	; 9
 26e:	91 05       	cpc	r25, r1
 270:	a8 f4       	brcc	.+42     	; 0x29c <_Z7getChari+0x32>
 272:	86 5a       	subi	r24, 0xA6	; 166
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	fc 01       	movw	r30, r24
 278:	0c 94 98 04 	jmp	0x930	; 0x930 <__tablejump2__>
	{
		case 1: return '1';
		case 2: return '2';
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	08 95       	ret
		case 3: return '3';
 280:	83 e3       	ldi	r24, 0x33	; 51
 282:	08 95       	ret
		case 4: return '4';
 284:	84 e3       	ldi	r24, 0x34	; 52
 286:	08 95       	ret
		case 5: return '5';
 288:	85 e3       	ldi	r24, 0x35	; 53
 28a:	08 95       	ret
		case 6: return '6';
 28c:	86 e3       	ldi	r24, 0x36	; 54
 28e:	08 95       	ret
		case 7: return '7';
 290:	87 e3       	ldi	r24, 0x37	; 55
 292:	08 95       	ret
		case 8: return '8';
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	08 95       	ret
		case 9: return '9';
 298:	89 e3       	ldi	r24, 0x39	; 57
 29a:	08 95       	ret
		default: return '0';
 29c:	80 e3       	ldi	r24, 0x30	; 48
 29e:	08 95       	ret

char getChar(int digit){
	
	switch(digit)
	{
		case 1: return '1';
 2a0:	81 e3       	ldi	r24, 0x31	; 49
		case 7: return '7';
		case 8: return '8';
		case 9: return '9';
		default: return '0';
	}
 2a2:	08 95       	ret

000002a4 <_Z15convertToStringiPc>:
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);   //enable receiver and transmitter
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); //8 bit data format
}

void convertToString(int16_t voltage, char word[])
{
 2a4:	4f 92       	push	r4
 2a6:	5f 92       	push	r5
 2a8:	6f 92       	push	r6
 2aa:	7f 92       	push	r7
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	4b 01       	movw	r8, r22
	double number = voltage;
 2c6:	bc 01       	movw	r22, r24
 2c8:	99 0f       	add	r25, r25
 2ca:	88 0b       	sbc	r24, r24
 2cc:	99 0b       	sbc	r25, r25
 2ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <__floatsisf>
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
	int divisionCount = 0;
	int digit;
	
	if(number < 0) number *= -1;
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	a9 01       	movw	r20, r18
 2dc:	0e 94 c7 02 	call	0x58e	; 0x58e <__cmpsf2>
 2e0:	88 23       	and	r24, r24
 2e2:	24 f4       	brge	.+8      	; 0x2ec <_Z15convertToStringiPc+0x48>
 2e4:	f7 fa       	bst	r15, 7
 2e6:	f0 94       	com	r15
 2e8:	f7 f8       	bld	r15, 7
 2ea:	f0 94       	com	r15
	
	while(number >= 1){
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e8       	ldi	r20, 0x80	; 128
 2f2:	5f e3       	ldi	r21, 0x3F	; 63
 2f4:	c7 01       	movw	r24, r14
 2f6:	b6 01       	movw	r22, r12
 2f8:	0e 94 26 04 	call	0x84c	; 0x84c <__gesf2>
 2fc:	88 23       	and	r24, r24
 2fe:	f4 f1       	brlt	.+124    	; 0x37c <_Z15convertToStringiPc+0xd8>
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	d0 e0       	ldi	r29, 0x00	; 0
		 number = number / 10;
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e2       	ldi	r20, 0x20	; 32
 30a:	51 e4       	ldi	r21, 0x41	; 65
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 cc 02 	call	0x598	; 0x598 <__divsf3>
 314:	6b 01       	movw	r12, r22
 316:	7c 01       	movw	r14, r24
		 divisionCount++;
 318:	21 96       	adiw	r28, 0x01	; 1
	int divisionCount = 0;
	int digit;
	
	if(number < 0) number *= -1;
	
	while(number >= 1){
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e8       	ldi	r20, 0x80	; 128
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	0e 94 26 04 	call	0x84c	; 0x84c <__gesf2>
 326:	88 23       	and	r24, r24
 328:	6c f7       	brge	.-38     	; 0x304 <_Z15convertToStringiPc+0x60>
 32a:	2b c0       	rjmp	.+86     	; 0x382 <_Z15convertToStringiPc+0xde>
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 32c:	a0 16       	cp	r10, r16
 32e:	b1 06       	cpc	r11, r17
 330:	29 f1       	breq	.+74     	; 0x37c <_Z15convertToStringiPc+0xd8>
		
		number = number * 10;
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e2       	ldi	r20, 0x20	; 32
 338:	51 e4       	ldi	r21, 0x41	; 65
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	0e 94 2b 04 	call	0x856	; 0x856 <__mulsf3>
 342:	6b 01       	movw	r12, r22
 344:	7c 01       	movw	r14, r24
		digit = (int)number;
 346:	0e 94 3e 03 	call	0x67c	; 0x67c <__fixsfsi>
 34a:	2b 01       	movw	r4, r22
 34c:	3c 01       	movw	r6, r24
		number = number - digit;
 34e:	07 2e       	mov	r0, r23
 350:	00 0c       	add	r0, r0
 352:	88 0b       	sbc	r24, r24
 354:	99 0b       	sbc	r25, r25
 356:	0e 94 76 03 	call	0x6ec	; 0x6ec <__floatsisf>
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__subsf3>
 366:	6b 01       	movw	r12, r22
 368:	7c 01       	movw	r14, r24
		word[i] = getChar(digit);
 36a:	c2 01       	movw	r24, r4
 36c:	0e 94 35 01 	call	0x26a	; 0x26a <_Z7getChari>
 370:	f8 01       	movw	r30, r16
 372:	81 93       	st	Z+, r24
 374:	8f 01       	movw	r16, r30
	
	while(number >= 1){
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 376:	ce 17       	cp	r28, r30
 378:	df 07       	cpc	r29, r31
 37a:	c1 f6       	brne	.-80     	; 0x32c <_Z15convertToStringiPc+0x88>
		digit = (int)number;
		number = number - digit;
		word[i] = getChar(digit);
	}
	
	word[6] = '\0';
 37c:	f4 01       	movw	r30, r8
 37e:	16 82       	std	Z+6, r1	; 0x06
}
 380:	0b c0       	rjmp	.+22     	; 0x398 <_Z15convertToStringiPc+0xf4>
	
	while(number >= 1){
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 382:	1c 16       	cp	r1, r28
 384:	1d 06       	cpc	r1, r29
 386:	d4 f7       	brge	.-12     	; 0x37c <_Z15convertToStringiPc+0xd8>
 388:	84 01       	movw	r16, r8
 38a:	c8 0d       	add	r28, r8
 38c:	d9 1d       	adc	r29, r9
 38e:	54 01       	movw	r10, r8
 390:	f6 e0       	ldi	r31, 0x06	; 6
 392:	af 0e       	add	r10, r31
 394:	b1 1c       	adc	r11, r1
 396:	cd cf       	rjmp	.-102    	; 0x332 <_Z15convertToStringiPc+0x8e>
		number = number - digit;
		word[i] = getChar(digit);
	}
	
	word[6] = '\0';
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	9f 90       	pop	r9
 3ae:	8f 90       	pop	r8
 3b0:	7f 90       	pop	r7
 3b2:	6f 90       	pop	r6
 3b4:	5f 90       	pop	r5
 3b6:	4f 90       	pop	r4
 3b8:	08 95       	ret

000003ba <_Z18moveLinearActuatorv>:
void startManeuvering(){
	moveStepperMotor();
	moveLinearActuator();
}

void moveLinearActuator(){
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
	int16_t v1;
	int16_t difference;
// 	int count = 0;
// 	int displaceTimer = 0;
	
	v0 = adc_read(R0);              //Read voltage value v0 and v1
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
 3c8:	ec 01       	movw	r28, r24
	
   	convertToString(v0, value);     //Used to convert the value into
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	71 e0       	ldi	r23, 0x01	; 1
 3ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z15convertToStringiPc>
   	uart_Transmit(value);			//a string and to display it
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z13uart_TransmitPc>
	
	v1 = adc_read(R1);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
 3e0:	8c 01       	movw	r16, r24
   	convertToString(v1, value);     //Used to convert the value into
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	71 e0       	ldi	r23, 0x01	; 1
 3e6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z15convertToStringiPc>
   	uart_Transmit(value);			//a string and to display it
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z13uart_TransmitPc>
	
	difference = v0 - v1;           //Take difference
 3f2:	ce 01       	movw	r24, r28
 3f4:	80 1b       	sub	r24, r16
 3f6:	91 0b       	sbc	r25, r17
	
	if(difference > -50) PORTD &= ~(1 << PORTD3);        //Send signal to start retracting
 3f8:	8f 3c       	cpi	r24, 0xCF	; 207
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	92 07       	cpc	r25, r18
 3fe:	14 f0       	brlt	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	5b 98       	cbi	0x0b, 3	; 11
 402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	else if(difference < 50) PORTD &= ~(1 << PORTD2);   //Send signal to start expanding
 404:	82 33       	cpi	r24, 0x32	; 50
 406:	91 05       	cpc	r25, r1
 408:	0c f4       	brge	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	5a 98       	cbi	0x0b, 2	; 11
	
	while(difference < -50 || difference > 50){        //True while the difference is outside the [-50, 50] range
 40c:	c2 96       	adiw	r24, 0x32	; 50
 40e:	85 36       	cpi	r24, 0x65	; 101
 410:	91 05       	cpc	r25, r1
 412:	68 f0       	brcs	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		
	/*	if(displaceTimer == 15) break; */ //After 20 seconds leave the loop
		
		v0 = adc_read(R0);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
 41a:	ec 01       	movw	r28, r24
		v1 = adc_read(R1);			                   //Continue reading voltage values and take difference
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8adc_readh>
	difference = v0 - v1;           //Take difference
	
	if(difference > -50) PORTD &= ~(1 << PORTD3);        //Send signal to start retracting
	else if(difference < 50) PORTD &= ~(1 << PORTD2);   //Send signal to start expanding
	
	while(difference < -50 || difference > 50){        //True while the difference is outside the [-50, 50] range
 422:	c8 1b       	sub	r28, r24
 424:	d9 0b       	sbc	r29, r25
 426:	e2 96       	adiw	r28, 0x32	; 50
 428:	c5 36       	cpi	r28, 0x65	; 101
 42a:	d1 05       	cpc	r29, r1
 42c:	98 f7       	brcc	.-26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
// 			 displaceTimer++;
// 			 count = 0;
// 		}
	}
	
	PORTD |= (1 << PORTD3) | (1 << PORTD2);  //Cut the power of the linear actuator
 42e:	8b b1       	in	r24, 0x0b	; 11
 430:	8c 60       	ori	r24, 0x0C	; 12
 432:	8b b9       	out	0x0b, r24	; 11
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <_Z16startManeuveringv>:
	//Set pins D 2 and 3 to power off the linear actuator by default
	PORTD |= (1 << PORTD3) | (1 << PORTD2);
}

void startManeuvering(){
	moveStepperMotor();
 43e:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z16moveStepperMotorv>
	moveLinearActuator();
 442:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z18moveLinearActuatorv>
 446:	08 95       	ret

00000448 <__vector_11>:
	TCCR1B |= (1 << CS12) | (1 << CS10);
	// set prescaler to 1024 and start the timer
}

ISR (TIMER1_COMPA_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	if(notManeuvering){
 46a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 46e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 472:	89 2b       	or	r24, r25
 474:	71 f0       	breq	.+28     	; 0x492 <__vector_11+0x4a>
		notManeuvering = 0;
 476:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 47a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		PINB |= (1<<PINB5); //toggle LED
 47e:	1d 9a       	sbi	0x03, 5	; 3
		startManeuvering();
 480:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z16startManeuveringv>
		PINB |= (1<<PINB5); //toggle LED
 484:	1d 9a       	sbi	0x03, 5	; 3
		notManeuvering = 1;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	//We done ;)
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__subsf3>:
 4b4:	50 58       	subi	r21, 0x80	; 128

000004b6 <__addsf3>:
 4b6:	bb 27       	eor	r27, r27
 4b8:	aa 27       	eor	r26, r26
 4ba:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__addsf3x>
 4be:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 4c2:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 4c6:	38 f0       	brcs	.+14     	; 0x4d6 <__addsf3+0x20>
 4c8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__addsf3+0x20>
 4ce:	39 f4       	brne	.+14     	; 0x4de <__addsf3+0x28>
 4d0:	9f 3f       	cpi	r25, 0xFF	; 255
 4d2:	19 f4       	brne	.+6      	; 0x4da <__addsf3+0x24>
 4d4:	26 f4       	brtc	.+8      	; 0x4de <__addsf3+0x28>
 4d6:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>
 4da:	0e f4       	brtc	.+2      	; 0x4de <__addsf3+0x28>
 4dc:	e0 95       	com	r30
 4de:	e7 fb       	bst	r30, 7
 4e0:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>

000004e4 <__addsf3x>:
 4e4:	e9 2f       	mov	r30, r25
 4e6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 4ea:	58 f3       	brcs	.-42     	; 0x4c2 <__addsf3+0xc>
 4ec:	ba 17       	cp	r27, r26
 4ee:	62 07       	cpc	r22, r18
 4f0:	73 07       	cpc	r23, r19
 4f2:	84 07       	cpc	r24, r20
 4f4:	95 07       	cpc	r25, r21
 4f6:	20 f0       	brcs	.+8      	; 0x500 <__addsf3x+0x1c>
 4f8:	79 f4       	brne	.+30     	; 0x518 <__addsf3x+0x34>
 4fa:	a6 f5       	brtc	.+104    	; 0x564 <__addsf3x+0x80>
 4fc:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_zero>
 500:	0e f4       	brtc	.+2      	; 0x504 <__addsf3x+0x20>
 502:	e0 95       	com	r30
 504:	0b 2e       	mov	r0, r27
 506:	ba 2f       	mov	r27, r26
 508:	a0 2d       	mov	r26, r0
 50a:	0b 01       	movw	r0, r22
 50c:	b9 01       	movw	r22, r18
 50e:	90 01       	movw	r18, r0
 510:	0c 01       	movw	r0, r24
 512:	ca 01       	movw	r24, r20
 514:	a0 01       	movw	r20, r0
 516:	11 24       	eor	r1, r1
 518:	ff 27       	eor	r31, r31
 51a:	59 1b       	sub	r21, r25
 51c:	99 f0       	breq	.+38     	; 0x544 <__addsf3x+0x60>
 51e:	59 3f       	cpi	r21, 0xF9	; 249
 520:	50 f4       	brcc	.+20     	; 0x536 <__addsf3x+0x52>
 522:	50 3e       	cpi	r21, 0xE0	; 224
 524:	68 f1       	brcs	.+90     	; 0x580 <__addsf3x+0x9c>
 526:	1a 16       	cp	r1, r26
 528:	f0 40       	sbci	r31, 0x00	; 0
 52a:	a2 2f       	mov	r26, r18
 52c:	23 2f       	mov	r18, r19
 52e:	34 2f       	mov	r19, r20
 530:	44 27       	eor	r20, r20
 532:	58 5f       	subi	r21, 0xF8	; 248
 534:	f3 cf       	rjmp	.-26     	; 0x51c <__addsf3x+0x38>
 536:	46 95       	lsr	r20
 538:	37 95       	ror	r19
 53a:	27 95       	ror	r18
 53c:	a7 95       	ror	r26
 53e:	f0 40       	sbci	r31, 0x00	; 0
 540:	53 95       	inc	r21
 542:	c9 f7       	brne	.-14     	; 0x536 <__addsf3x+0x52>
 544:	7e f4       	brtc	.+30     	; 0x564 <__addsf3x+0x80>
 546:	1f 16       	cp	r1, r31
 548:	ba 0b       	sbc	r27, r26
 54a:	62 0b       	sbc	r22, r18
 54c:	73 0b       	sbc	r23, r19
 54e:	84 0b       	sbc	r24, r20
 550:	ba f0       	brmi	.+46     	; 0x580 <__addsf3x+0x9c>
 552:	91 50       	subi	r25, 0x01	; 1
 554:	a1 f0       	breq	.+40     	; 0x57e <__addsf3x+0x9a>
 556:	ff 0f       	add	r31, r31
 558:	bb 1f       	adc	r27, r27
 55a:	66 1f       	adc	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	c2 f7       	brpl	.-16     	; 0x552 <__addsf3x+0x6e>
 562:	0e c0       	rjmp	.+28     	; 0x580 <__addsf3x+0x9c>
 564:	ba 0f       	add	r27, r26
 566:	62 1f       	adc	r22, r18
 568:	73 1f       	adc	r23, r19
 56a:	84 1f       	adc	r24, r20
 56c:	48 f4       	brcc	.+18     	; 0x580 <__addsf3x+0x9c>
 56e:	87 95       	ror	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b7 95       	ror	r27
 576:	f7 95       	ror	r31
 578:	9e 3f       	cpi	r25, 0xFE	; 254
 57a:	08 f0       	brcs	.+2      	; 0x57e <__addsf3x+0x9a>
 57c:	b0 cf       	rjmp	.-160    	; 0x4de <__addsf3+0x28>
 57e:	93 95       	inc	r25
 580:	88 0f       	add	r24, r24
 582:	08 f0       	brcs	.+2      	; 0x586 <__addsf3x+0xa2>
 584:	99 27       	eor	r25, r25
 586:	ee 0f       	add	r30, r30
 588:	97 95       	ror	r25
 58a:	87 95       	ror	r24
 58c:	08 95       	ret

0000058e <__cmpsf2>:
 58e:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_cmp>
 592:	08 f4       	brcc	.+2      	; 0x596 <__cmpsf2+0x8>
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret

00000598 <__divsf3>:
 598:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__divsf3x>
 59c:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 5a0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 5a4:	58 f0       	brcs	.+22     	; 0x5bc <__divsf3+0x24>
 5a6:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 5aa:	40 f0       	brcs	.+16     	; 0x5bc <__divsf3+0x24>
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <__divsf3+0x20>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	29 f0       	breq	.+10     	; 0x5bc <__divsf3+0x24>
 5b2:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 5b6:	51 11       	cpse	r21, r1
 5b8:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 5bc:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>

000005c0 <__divsf3x>:
 5c0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 5c4:	68 f3       	brcs	.-38     	; 0x5a0 <__divsf3+0x8>

000005c6 <__divsf3_pse>:
 5c6:	99 23       	and	r25, r25
 5c8:	b1 f3       	breq	.-20     	; 0x5b6 <__divsf3+0x1e>
 5ca:	55 23       	and	r21, r21
 5cc:	91 f3       	breq	.-28     	; 0x5b2 <__divsf3+0x1a>
 5ce:	95 1b       	sub	r25, r21
 5d0:	55 0b       	sbc	r21, r21
 5d2:	bb 27       	eor	r27, r27
 5d4:	aa 27       	eor	r26, r26
 5d6:	62 17       	cp	r22, r18
 5d8:	73 07       	cpc	r23, r19
 5da:	84 07       	cpc	r24, r20
 5dc:	38 f0       	brcs	.+14     	; 0x5ec <__divsf3_pse+0x26>
 5de:	9f 5f       	subi	r25, 0xFF	; 255
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	44 1f       	adc	r20, r20
 5e8:	aa 1f       	adc	r26, r26
 5ea:	a9 f3       	breq	.-22     	; 0x5d6 <__divsf3_pse+0x10>
 5ec:	35 d0       	rcall	.+106    	; 0x658 <__divsf3_pse+0x92>
 5ee:	0e 2e       	mov	r0, r30
 5f0:	3a f0       	brmi	.+14     	; 0x600 <__divsf3_pse+0x3a>
 5f2:	e0 e8       	ldi	r30, 0x80	; 128
 5f4:	32 d0       	rcall	.+100    	; 0x65a <__divsf3_pse+0x94>
 5f6:	91 50       	subi	r25, 0x01	; 1
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	e6 95       	lsr	r30
 5fc:	00 1c       	adc	r0, r0
 5fe:	ca f7       	brpl	.-14     	; 0x5f2 <__divsf3_pse+0x2c>
 600:	2b d0       	rcall	.+86     	; 0x658 <__divsf3_pse+0x92>
 602:	fe 2f       	mov	r31, r30
 604:	29 d0       	rcall	.+82     	; 0x658 <__divsf3_pse+0x92>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	bb 1f       	adc	r27, r27
 60e:	26 17       	cp	r18, r22
 610:	37 07       	cpc	r19, r23
 612:	48 07       	cpc	r20, r24
 614:	ab 07       	cpc	r26, r27
 616:	b0 e8       	ldi	r27, 0x80	; 128
 618:	09 f0       	breq	.+2      	; 0x61c <__divsf3_pse+0x56>
 61a:	bb 0b       	sbc	r27, r27
 61c:	80 2d       	mov	r24, r0
 61e:	bf 01       	movw	r22, r30
 620:	ff 27       	eor	r31, r31
 622:	93 58       	subi	r25, 0x83	; 131
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	3a f0       	brmi	.+14     	; 0x636 <__divsf3_pse+0x70>
 628:	9e 3f       	cpi	r25, 0xFE	; 254
 62a:	51 05       	cpc	r21, r1
 62c:	78 f0       	brcs	.+30     	; 0x64c <__divsf3_pse+0x86>
 62e:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 632:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	e4 f3       	brlt	.-8      	; 0x632 <__divsf3_pse+0x6c>
 63a:	98 3e       	cpi	r25, 0xE8	; 232
 63c:	d4 f3       	brlt	.-12     	; 0x632 <__divsf3_pse+0x6c>
 63e:	86 95       	lsr	r24
 640:	77 95       	ror	r23
 642:	67 95       	ror	r22
 644:	b7 95       	ror	r27
 646:	f7 95       	ror	r31
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	c9 f7       	brne	.-14     	; 0x63e <__divsf3_pse+0x78>
 64c:	88 0f       	add	r24, r24
 64e:	91 1d       	adc	r25, r1
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret
 658:	e1 e0       	ldi	r30, 0x01	; 1
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	bb 1f       	adc	r27, r27
 662:	62 17       	cp	r22, r18
 664:	73 07       	cpc	r23, r19
 666:	84 07       	cpc	r24, r20
 668:	ba 07       	cpc	r27, r26
 66a:	20 f0       	brcs	.+8      	; 0x674 <__divsf3_pse+0xae>
 66c:	62 1b       	sub	r22, r18
 66e:	73 0b       	sbc	r23, r19
 670:	84 0b       	sbc	r24, r20
 672:	ba 0b       	sbc	r27, r26
 674:	ee 1f       	adc	r30, r30
 676:	88 f7       	brcc	.-30     	; 0x65a <__divsf3_pse+0x94>
 678:	e0 95       	com	r30
 67a:	08 95       	ret

0000067c <__fixsfsi>:
 67c:	0e 94 45 03 	call	0x68a	; 0x68a <__fixunssfsi>
 680:	68 94       	set
 682:	b1 11       	cpse	r27, r1
 684:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 688:	08 95       	ret

0000068a <__fixunssfsi>:
 68a:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_splitA>
 68e:	88 f0       	brcs	.+34     	; 0x6b2 <__fixunssfsi+0x28>
 690:	9f 57       	subi	r25, 0x7F	; 127
 692:	98 f0       	brcs	.+38     	; 0x6ba <__fixunssfsi+0x30>
 694:	b9 2f       	mov	r27, r25
 696:	99 27       	eor	r25, r25
 698:	b7 51       	subi	r27, 0x17	; 23
 69a:	b0 f0       	brcs	.+44     	; 0x6c8 <__fixunssfsi+0x3e>
 69c:	e1 f0       	breq	.+56     	; 0x6d6 <__fixunssfsi+0x4c>
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	1a f0       	brmi	.+6      	; 0x6ae <__fixunssfsi+0x24>
 6a8:	ba 95       	dec	r27
 6aa:	c9 f7       	brne	.-14     	; 0x69e <__fixunssfsi+0x14>
 6ac:	14 c0       	rjmp	.+40     	; 0x6d6 <__fixunssfsi+0x4c>
 6ae:	b1 30       	cpi	r27, 0x01	; 1
 6b0:	91 f0       	breq	.+36     	; 0x6d6 <__fixunssfsi+0x4c>
 6b2:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_zero>
 6b6:	b1 e0       	ldi	r27, 0x01	; 1
 6b8:	08 95       	ret
 6ba:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_zero>
 6be:	67 2f       	mov	r22, r23
 6c0:	78 2f       	mov	r23, r24
 6c2:	88 27       	eor	r24, r24
 6c4:	b8 5f       	subi	r27, 0xF8	; 248
 6c6:	39 f0       	breq	.+14     	; 0x6d6 <__fixunssfsi+0x4c>
 6c8:	b9 3f       	cpi	r27, 0xF9	; 249
 6ca:	cc f3       	brlt	.-14     	; 0x6be <__fixunssfsi+0x34>
 6cc:	86 95       	lsr	r24
 6ce:	77 95       	ror	r23
 6d0:	67 95       	ror	r22
 6d2:	b3 95       	inc	r27
 6d4:	d9 f7       	brne	.-10     	; 0x6cc <__fixunssfsi+0x42>
 6d6:	3e f4       	brtc	.+14     	; 0x6e6 <__fixunssfsi+0x5c>
 6d8:	90 95       	com	r25
 6da:	80 95       	com	r24
 6dc:	70 95       	com	r23
 6de:	61 95       	neg	r22
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	8f 4f       	sbci	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	08 95       	ret

000006e8 <__floatunsisf>:
 6e8:	e8 94       	clt
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__floatsisf+0x12>

000006ec <__floatsisf>:
 6ec:	97 fb       	bst	r25, 7
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__floatsisf+0x12>
 6f0:	90 95       	com	r25
 6f2:	80 95       	com	r24
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	99 23       	and	r25, r25
 700:	a9 f0       	breq	.+42     	; 0x72c <__floatsisf+0x40>
 702:	f9 2f       	mov	r31, r25
 704:	96 e9       	ldi	r25, 0x96	; 150
 706:	bb 27       	eor	r27, r27
 708:	93 95       	inc	r25
 70a:	f6 95       	lsr	r31
 70c:	87 95       	ror	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f1 11       	cpse	r31, r1
 716:	f8 cf       	rjmp	.-16     	; 0x708 <__floatsisf+0x1c>
 718:	fa f4       	brpl	.+62     	; 0x758 <__floatsisf+0x6c>
 71a:	bb 0f       	add	r27, r27
 71c:	11 f4       	brne	.+4      	; 0x722 <__floatsisf+0x36>
 71e:	60 ff       	sbrs	r22, 0
 720:	1b c0       	rjmp	.+54     	; 0x758 <__floatsisf+0x6c>
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	16 c0       	rjmp	.+44     	; 0x758 <__floatsisf+0x6c>
 72c:	88 23       	and	r24, r24
 72e:	11 f0       	breq	.+4      	; 0x734 <__floatsisf+0x48>
 730:	96 e9       	ldi	r25, 0x96	; 150
 732:	11 c0       	rjmp	.+34     	; 0x756 <__floatsisf+0x6a>
 734:	77 23       	and	r23, r23
 736:	21 f0       	breq	.+8      	; 0x740 <__floatsisf+0x54>
 738:	9e e8       	ldi	r25, 0x8E	; 142
 73a:	87 2f       	mov	r24, r23
 73c:	76 2f       	mov	r23, r22
 73e:	05 c0       	rjmp	.+10     	; 0x74a <__floatsisf+0x5e>
 740:	66 23       	and	r22, r22
 742:	71 f0       	breq	.+28     	; 0x760 <__floatsisf+0x74>
 744:	96 e8       	ldi	r25, 0x86	; 134
 746:	86 2f       	mov	r24, r22
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	2a f0       	brmi	.+10     	; 0x758 <__floatsisf+0x6c>
 74e:	9a 95       	dec	r25
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	da f7       	brpl	.-10     	; 0x74e <__floatsisf+0x62>
 758:	88 0f       	add	r24, r24
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret

00000762 <__fp_cmp>:
 762:	99 0f       	add	r25, r25
 764:	00 08       	sbc	r0, r0
 766:	55 0f       	add	r21, r21
 768:	aa 0b       	sbc	r26, r26
 76a:	e0 e8       	ldi	r30, 0x80	; 128
 76c:	fe ef       	ldi	r31, 0xFE	; 254
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	e8 07       	cpc	r30, r24
 774:	f9 07       	cpc	r31, r25
 776:	c0 f0       	brcs	.+48     	; 0x7a8 <__fp_cmp+0x46>
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	e4 07       	cpc	r30, r20
 77e:	f5 07       	cpc	r31, r21
 780:	98 f0       	brcs	.+38     	; 0x7a8 <__fp_cmp+0x46>
 782:	62 1b       	sub	r22, r18
 784:	73 0b       	sbc	r23, r19
 786:	84 0b       	sbc	r24, r20
 788:	95 0b       	sbc	r25, r21
 78a:	39 f4       	brne	.+14     	; 0x79a <__fp_cmp+0x38>
 78c:	0a 26       	eor	r0, r26
 78e:	61 f0       	breq	.+24     	; 0x7a8 <__fp_cmp+0x46>
 790:	23 2b       	or	r18, r19
 792:	24 2b       	or	r18, r20
 794:	25 2b       	or	r18, r21
 796:	21 f4       	brne	.+8      	; 0x7a0 <__fp_cmp+0x3e>
 798:	08 95       	ret
 79a:	0a 26       	eor	r0, r26
 79c:	09 f4       	brne	.+2      	; 0x7a0 <__fp_cmp+0x3e>
 79e:	a1 40       	sbci	r26, 0x01	; 1
 7a0:	a6 95       	lsr	r26
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	81 1d       	adc	r24, r1
 7a6:	81 1d       	adc	r24, r1
 7a8:	08 95       	ret

000007aa <__fp_inf>:
 7aa:	97 f9       	bld	r25, 7
 7ac:	9f 67       	ori	r25, 0x7F	; 127
 7ae:	80 e8       	ldi	r24, 0x80	; 128
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	08 95       	ret

000007b6 <__fp_nan>:
 7b6:	9f ef       	ldi	r25, 0xFF	; 255
 7b8:	80 ec       	ldi	r24, 0xC0	; 192
 7ba:	08 95       	ret

000007bc <__fp_pscA>:
 7bc:	00 24       	eor	r0, r0
 7be:	0a 94       	dec	r0
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	18 06       	cpc	r1, r24
 7c6:	09 06       	cpc	r0, r25
 7c8:	08 95       	ret

000007ca <__fp_pscB>:
 7ca:	00 24       	eor	r0, r0
 7cc:	0a 94       	dec	r0
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	05 06       	cpc	r0, r21
 7d6:	08 95       	ret

000007d8 <__fp_round>:
 7d8:	09 2e       	mov	r0, r25
 7da:	03 94       	inc	r0
 7dc:	00 0c       	add	r0, r0
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0xc>
 7e0:	88 23       	and	r24, r24
 7e2:	52 f0       	brmi	.+20     	; 0x7f8 <__fp_round+0x20>
 7e4:	bb 0f       	add	r27, r27
 7e6:	40 f4       	brcc	.+16     	; 0x7f8 <__fp_round+0x20>
 7e8:	bf 2b       	or	r27, r31
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <__fp_round+0x18>
 7ec:	60 ff       	sbrs	r22, 0
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__fp_round+0x20>
 7f0:	6f 5f       	subi	r22, 0xFF	; 255
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	08 95       	ret

000007fa <__fp_split3>:
 7fa:	57 fd       	sbrc	r21, 7
 7fc:	90 58       	subi	r25, 0x80	; 128
 7fe:	44 0f       	add	r20, r20
 800:	55 1f       	adc	r21, r21
 802:	59 f0       	breq	.+22     	; 0x81a <__fp_splitA+0x10>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	71 f0       	breq	.+28     	; 0x824 <__fp_splitA+0x1a>
 808:	47 95       	ror	r20

0000080a <__fp_splitA>:
 80a:	88 0f       	add	r24, r24
 80c:	97 fb       	bst	r25, 7
 80e:	99 1f       	adc	r25, r25
 810:	61 f0       	breq	.+24     	; 0x82a <__fp_splitA+0x20>
 812:	9f 3f       	cpi	r25, 0xFF	; 255
 814:	79 f0       	breq	.+30     	; 0x834 <__fp_splitA+0x2a>
 816:	87 95       	ror	r24
 818:	08 95       	ret
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	55 1f       	adc	r21, r21
 822:	f2 cf       	rjmp	.-28     	; 0x808 <__fp_split3+0xe>
 824:	46 95       	lsr	r20
 826:	f1 df       	rcall	.-30     	; 0x80a <__fp_splitA>
 828:	08 c0       	rjmp	.+16     	; 0x83a <__fp_splitA+0x30>
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	99 1f       	adc	r25, r25
 832:	f1 cf       	rjmp	.-30     	; 0x816 <__fp_splitA+0xc>
 834:	86 95       	lsr	r24
 836:	71 05       	cpc	r23, r1
 838:	61 05       	cpc	r22, r1
 83a:	08 94       	sec
 83c:	08 95       	ret

0000083e <__fp_zero>:
 83e:	e8 94       	clt

00000840 <__fp_szero>:
 840:	bb 27       	eor	r27, r27
 842:	66 27       	eor	r22, r22
 844:	77 27       	eor	r23, r23
 846:	cb 01       	movw	r24, r22
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__gesf2>:
 84c:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_cmp>
 850:	08 f4       	brcc	.+2      	; 0x854 <__gesf2+0x8>
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	08 95       	ret

00000856 <__mulsf3>:
 856:	0e 94 3e 04 	call	0x87c	; 0x87c <__mulsf3x>
 85a:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 85e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 862:	38 f0       	brcs	.+14     	; 0x872 <__mulsf3+0x1c>
 864:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 868:	20 f0       	brcs	.+8      	; 0x872 <__mulsf3+0x1c>
 86a:	95 23       	and	r25, r21
 86c:	11 f0       	breq	.+4      	; 0x872 <__mulsf3+0x1c>
 86e:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 872:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>
 876:	11 24       	eor	r1, r1
 878:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>

0000087c <__mulsf3x>:
 87c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 880:	70 f3       	brcs	.-36     	; 0x85e <__mulsf3+0x8>

00000882 <__mulsf3_pse>:
 882:	95 9f       	mul	r25, r21
 884:	c1 f3       	breq	.-16     	; 0x876 <__mulsf3+0x20>
 886:	95 0f       	add	r25, r21
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	55 1f       	adc	r21, r21
 88c:	62 9f       	mul	r22, r18
 88e:	f0 01       	movw	r30, r0
 890:	72 9f       	mul	r23, r18
 892:	bb 27       	eor	r27, r27
 894:	f0 0d       	add	r31, r0
 896:	b1 1d       	adc	r27, r1
 898:	63 9f       	mul	r22, r19
 89a:	aa 27       	eor	r26, r26
 89c:	f0 0d       	add	r31, r0
 89e:	b1 1d       	adc	r27, r1
 8a0:	aa 1f       	adc	r26, r26
 8a2:	64 9f       	mul	r22, r20
 8a4:	66 27       	eor	r22, r22
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	66 1f       	adc	r22, r22
 8ac:	82 9f       	mul	r24, r18
 8ae:	22 27       	eor	r18, r18
 8b0:	b0 0d       	add	r27, r0
 8b2:	a1 1d       	adc	r26, r1
 8b4:	62 1f       	adc	r22, r18
 8b6:	73 9f       	mul	r23, r19
 8b8:	b0 0d       	add	r27, r0
 8ba:	a1 1d       	adc	r26, r1
 8bc:	62 1f       	adc	r22, r18
 8be:	83 9f       	mul	r24, r19
 8c0:	a0 0d       	add	r26, r0
 8c2:	61 1d       	adc	r22, r1
 8c4:	22 1f       	adc	r18, r18
 8c6:	74 9f       	mul	r23, r20
 8c8:	33 27       	eor	r19, r19
 8ca:	a0 0d       	add	r26, r0
 8cc:	61 1d       	adc	r22, r1
 8ce:	23 1f       	adc	r18, r19
 8d0:	84 9f       	mul	r24, r20
 8d2:	60 0d       	add	r22, r0
 8d4:	21 1d       	adc	r18, r1
 8d6:	82 2f       	mov	r24, r18
 8d8:	76 2f       	mov	r23, r22
 8da:	6a 2f       	mov	r22, r26
 8dc:	11 24       	eor	r1, r1
 8de:	9f 57       	subi	r25, 0x7F	; 127
 8e0:	50 40       	sbci	r21, 0x00	; 0
 8e2:	9a f0       	brmi	.+38     	; 0x90a <__stack+0xb>
 8e4:	f1 f0       	breq	.+60     	; 0x922 <__stack+0x23>
 8e6:	88 23       	and	r24, r24
 8e8:	4a f0       	brmi	.+18     	; 0x8fc <__mulsf3_pse+0x7a>
 8ea:	ee 0f       	add	r30, r30
 8ec:	ff 1f       	adc	r31, r31
 8ee:	bb 1f       	adc	r27, r27
 8f0:	66 1f       	adc	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	91 50       	subi	r25, 0x01	; 1
 8f8:	50 40       	sbci	r21, 0x00	; 0
 8fa:	a9 f7       	brne	.-22     	; 0x8e6 <__mulsf3_pse+0x64>
 8fc:	9e 3f       	cpi	r25, 0xFE	; 254
 8fe:	51 05       	cpc	r21, r1
 900:	80 f0       	brcs	.+32     	; 0x922 <__stack+0x23>
 902:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 906:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 90a:	5f 3f       	cpi	r21, 0xFF	; 255
 90c:	e4 f3       	brlt	.-8      	; 0x906 <__stack+0x7>
 90e:	98 3e       	cpi	r25, 0xE8	; 232
 910:	d4 f3       	brlt	.-12     	; 0x906 <__stack+0x7>
 912:	86 95       	lsr	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	f7 95       	ror	r31
 91c:	e7 95       	ror	r30
 91e:	9f 5f       	subi	r25, 0xFF	; 255
 920:	c1 f7       	brne	.-16     	; 0x912 <__stack+0x13>
 922:	fe 2b       	or	r31, r30
 924:	88 0f       	add	r24, r24
 926:	91 1d       	adc	r25, r1
 928:	96 95       	lsr	r25
 92a:	87 95       	ror	r24
 92c:	97 f9       	bld	r25, 7
 92e:	08 95       	ret

00000930 <__tablejump2__>:
 930:	ee 0f       	add	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	05 90       	lpm	r0, Z+
 936:	f4 91       	lpm	r31, Z
 938:	e0 2d       	mov	r30, r0
 93a:	09 94       	ijmp

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
